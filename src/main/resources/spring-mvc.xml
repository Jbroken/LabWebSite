<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd ">
    


	<!-- 静态资源直接访问 -->
	<mvc:resources location="/images/" mapping="/images/**" />
	<mvc:resources location="/plugins/" mapping="/plugins/**" />
	<mvc:resources location="/theme/" mapping="/theme/**" />
	
	<!-- 手动配置Springmvc注解驱动 -->  
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>    
  
    <!-- 启动Spring MVC的注解功能,设置编码方式，防止乱码 -->  
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />  
                <bean class = "org.springframework.http.converter.StringHttpMessageConverter">  
                        <property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />  
                </bean>  
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
                    <property name="supportedMediaTypes">  
                        <list>  
                            <value>application/json;charset=UTF-8</value>  
                        </list>  
                    </property>  
                </bean>  
            </list>  
        </property>  
    </bean> 

	<!-- controller 扫描 -->
	<context:component-scan base-package="com.wncg.controller.manage,com.wncg.controller.view"></context:component-scan>
	
	<!-- SpringMVC上传文件时,需配置MultipartResolver处理器 -->
     <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         <!-- 指定所上传文件的总大小不能超过8000KB......注意maxUploadSize属性的限制不是针对单个文件,而是所有文件的容量之和 -->
        <property name="maxUploadSize" value="8000000"/>
     </bean>
     
     <!-- SpringMVC在超出上传文件限制时,会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
     <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的,而且此时还没有进入到Controller方法中 -->
     <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
         <property name="exceptionMappings">
             <props>
                 <!-- 遇到MaxUploadSizeExceededException异常时,自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
                 <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
             </props>
         </property>
     </bean>

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 通过setter方法注入前缀 /WEB-INF/jsps/showMsg.jsp -->
		<property name="prefix" value="/WEB-INF/jsps/" />
		<!-- 通过setter方法注入后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>
	<!---->
	<!--<bean class="accenture.cdoe.report.utils.ApplicationContextHolder" />  -->
	<!---->
	<!--&lt;!&ndash; 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 &ndash;&gt;-->
	<!--&lt;!&ndash; 配置以下两个bean即可实现此功能 &ndash;&gt;-->
	<!--&lt;!&ndash; Enable Shiro Annotations for Spring-configured beans. Only run after -->
		<!--the lifecycleBeanProcessor has run &ndash;&gt;-->
	<!--&lt;!&ndash; 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) &ndash;&gt;-->
	<!--&lt;!&ndash; &ndash;&gt;-->
	<!--<bean-->
		<!--class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"-->
		<!--depends-on="lifecycleBeanPostProcessor" />-->

</beans>
